package com.psc.view.frmrelatorio;

import com.psc.dao.CategoriaDAO;
import com.psc.dao.ProdutoDAO;
import com.psc.model.Categoria;
import com.psc.model.Produto;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 * Janela para geração de diversos relatórios de produtos e categorias.
 *
 * <p>Dependendo da opção selecionada em {@code JCSeletor}, exibe:
 * <ul>
 *   <li>Lista de preços ordenada por nome.</li>
 *   <li>Balanço físico e financeiro do estoque.</li>
 *   <li>Produtos abaixo da quantidade mínima (com ícone e cor).</li>
 *   <li>Produtos acima da quantidade máxima (com ícone e cor).</li>
 *   <li>Relação de quantidade de produtos por categoria.</li>
 * </ul>
 * Os dados são obtidos através de {@link ProdutoDAO} e {@link CategoriaDAO}.</p>
 *
 * @author NatanKonig
 * @version 1.0
 */
public class FrmRelatorio extends javax.swing.JFrame {

    /**
     * Modelo de tabela utilizado para exibição dos relatórios.
     */
    private DefaultTableModel modeloTabela;

    /**
     * DAO para operações relacionadas a produtos.
     */
    private ProdutoDAO produtoDAO = new ProdutoDAO();

    /**
     * DAO para operações relacionadas a categorias.
     */
    private CategoriaDAO categoriaDAO = new CategoriaDAO();

    /**
     * Lista de produtos obtida do banco de dados.
     */
    private List<Produto> produtos = new ArrayList<>();

    /**
     * Construtor padrão da janela de relatórios.
     * <p>Inicializa componentes gráficos.</p>
     */
    public FrmRelatorio() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        JCSeletor = new javax.swing.JComboBox<>();
        JBGerar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabelaRelatorio = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        JLValorTotalEstoque = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Relatorio do Estoque");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 0, 36)); // NOI18N
        jLabel1.setText("Relatórios de Estoque");

        JCSeletor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Lista de Preços dos produtos", "Balanço Físico e Financeiro dos produtos", "Produtos abaixo da quantidade minima", "Produto acima da quantidade maxima", "Relação de produtos por categoria"}));
        JCSeletor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCSeletorActionPerformed(evt);
            }
        });

        JBGerar.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        JBGerar.setText("Gerar Relatório");
        JBGerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBGerarActionPerformed(evt);
            }
        });

        TabelaRelatorio.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Gere um relatório para visualizá-lo"
                }
        ));
        jScrollPane1.setViewportView(TabelaRelatorio);

        jButton1.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        JLValorTotalEstoque.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(JLValorTotalEstoque)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(JCSeletor, javax.swing.GroupLayout.PREFERRED_SIZE, 734, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(55, 55, 55)
                                                                .addComponent(JBGerar, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addContainerGap(51, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(230, 230, 230))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(JCSeletor, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(JBGerar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(JLValorTotalEstoque)
                                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Ação executada ao clicar no botão "Gerar" ({@code JBGerar}).
     * <p>Dependendo do índice selecionado em {@code JCSeletor}, gera e exibe
     * o relatório correspondente na tabela {@code TabelaRelatorio}:</p>
     * <ol>
     *   <li>
     *     Relatório de lista de preços:
     *     <ul>
     *       <li>Obtém todos os produtos via {@link ProdutoDAO#listar()}.</li>
     *       <li>Ordena por nome.</li>
     *       <li>Preenche colunas: ID, Nome, Preço, Unidade de medida, Categoria.</li>
     *     </ul>
     *   </li>
     *   <li>
     *     Relatório de balanço físico e financeiro:
     *     <ul>
     *       <li>Obtém todos os produtos via {@link ProdutoDAO#listar()}.</li>
     *       <li>Ordena por nome.</li>
     *       <li>Calcula valor total do estoque (quantidade * preço unitário).</li>
     *       <li>Preenche colunas: ID, Nome, Quantidade, Valor Unitário, Valor Total.</li>
     *       <li>Exibe o valor total do estoque em {@code JLValorTotalEstoque}.</li>
     *     </ul>
     *   </li>
     *   <li>
     *     Relatório de produtos abaixo da quantidade mínima:
     *     <ul>
     *       <li>Obtém todos os produtos via {@link ProdutoDAO#listar()}.</li>
     *       <li>Preenche colunas: ID, Nome, Quantidade Mínima, Quantidade Atual, Status.</li>
     *       <li>Define "Baixo" se quantidade < quantidade mínima, caso contrário "Normal".</li>
     *       <li>Aplica ícone e cor ao status através de {@link DefaultTableCellRenderer}.</li>
     *     </ul>
     *   </li>
     *   <li>
     *     Relatório de produtos acima da quantidade máxima:
     *     <ul>
     *       <li>Obtém todos os produtos via {@link ProdutoDAO#listar()}.</li>
     *       <li>Preenche colunas: ID, Nome, Quantidade Máxima, Quantidade Atual, Status.</li>
     *       <li>Define "Alto" se quantidade > quantidade máxima, caso contrário "Normal".</li>
     *       <li>Aplica ícone e cor ao status através de {@link DefaultTableCellRenderer}.</li>
     *     </ul>
     *   </li>
     *   <li>
     *     Relatório de relação de produtos por categoria:
     *     <ul>
     *       <li>Obtém todos os produtos ({@link ProdutoDAO#listar()}) e categorias ({@link CategoriaDAO#listar()}).</li>
     *       <li>Conta quantos produtos existem em cada categoria.</li>
     *       <li>Preenche colunas: Categoria, Quantidade de Produtos Distintos.</li>
     *     </ul>
     *   </li>
     * </ol>
     *
     * @param evt evento de ação disparado ao clicar no botão Gerar
     */
    private void JBGerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBGerarActionPerformed
        int tipoRelatorio = JCSeletor.getSelectedIndex();
        switch (tipoRelatorio) {
            case 0: /* Relatorio de lista de precos */
                produtos = produtoDAO.listar();
                Collections.sort(produtos, Comparator.comparing(Produto::getNome));

                modeloTabela = new DefaultTableModel();
                modeloTabela.setColumnIdentifiers(new String[]{"ID", "Nome", "Preço", "Unidade de medida", "Categoria"});
                for (Produto p : produtos) {
                    modeloTabela.addRow(new Object[]{
                            p.getId(),
                            p.getNome(),
                            "R$ " + p.getPrecoUnitario(),
                            p.getUnidade(),
                            p.getCategoria()});
                }
                TabelaRelatorio.setModel(modeloTabela);
                JLValorTotalEstoque.setText("");
                break;
            case 1: /* Relatorio de balanco fisco e financeiro*/
                double valorTotalEstoque = 0.0;
                produtos = produtoDAO.listar();
                Collections.sort(produtos, Comparator.comparing(Produto::getNome));

                modeloTabela = new DefaultTableModel();
                modeloTabela.setColumnIdentifiers(new String[]{"ID", "Nome", "Quantidade", "Valor Unitario", "Valor Total"});
                for (Produto p : produtos) {
                    valorTotalEstoque += p.getQuantidadeEstoque() * p.getPrecoUnitario();
                    modeloTabela.addRow(new Object[]{
                            p.getId(),
                            p.getNome(),
                            p.getQuantidadeEstoque(),
                            "R$ " + p.getPrecoUnitario(),
                            "R$ " + (p.getPrecoUnitario() * p.getQuantidadeEstoque())});
                }
                TabelaRelatorio.setModel(modeloTabela);

                JLValorTotalEstoque.setText("Valor total de todo o estoque: R$ " + valorTotalEstoque);
                break;
            case 2: /* Relatorio de produtos abaixo da quantidade minima*/
                produtos = produtoDAO.listar();

                modeloTabela = new DefaultTableModel();
                modeloTabela.setColumnIdentifiers(new String[]{"ID", "Nome", "Quantidade Minima", "Quantidade Atual", "Status"});
                for (Produto p : produtos) {
                    modeloTabela.addRow(new Object[]{
                            p.getId(),
                            p.getNome(),
                            p.getQuantidadeMinima(),
                            p.getQuantidadeEstoque(),
                            p.getQuantidadeEstoque() < p.getQuantidadeMinima() ? "Baixo" : "Normal"
                    });
                }
                TabelaRelatorio.setModel(modeloTabela);

                DefaultTableCellRenderer rendererStatus = new DefaultTableCellRenderer() {
                    private final Icon iconeBaixo = new ImageIcon(getClass().getResource("/FRAMEestoque_baixo.png"));
                    private final Icon iconeNormal = new ImageIcon(getClass().getResource("/FRAMEestoque_normal.png"));

                    @Override
                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                                   boolean hasFocus, int row, int column) {

                        JLabel label = new JLabel();
                        label.setOpaque(true);

                        String status = value.toString();

                        // Define texto e ícone
                        if (status.equalsIgnoreCase("Baixo")) {
                            label.setText("Baixo");
                            label.setIcon(iconeBaixo);
                            label.setForeground(Color.RED);
                        } else if (status.equalsIgnoreCase("Normal")) {
                            label.setText("Normal");
                            label.setIcon(iconeNormal);
                            label.setForeground(new Color(0, 128, 0));
                        } else {
                            label.setText(status);
                            label.setForeground(Color.BLACK);
                        }

                        // Alinha texto e ícone
                        label.setHorizontalTextPosition(SwingConstants.RIGHT);
                        label.setIconTextGap(8); // espaço entre ícone e texto

                        // Seleção
                        if (isSelected) {
                            label.setBackground(table.getSelectionBackground());
                        } else {
                            label.setBackground(Color.WHITE);
                        }

                        return label;
                    }
                };

                // Aplica o renderizador à coluna "Status"
                TabelaRelatorio.getColumnModel().getColumn(4).setCellRenderer(rendererStatus);
                JLValorTotalEstoque.setText("");
                break;
            case 3: /* Relatorio de produtos acima da quantidade maxima */
                produtos = produtoDAO.listar();

                modeloTabela = new DefaultTableModel();
                modeloTabela.setColumnIdentifiers(new String[]{"ID", "Nome", "Quantidade Maxima", "Quantidade Atual", "Status"});

                for (Produto p : produtos) {
                    modeloTabela.addRow(new Object[]{
                            p.getId(),
                            p.getNome(),
                            p.getQuantidadeMaxima(),
                            p.getQuantidadeEstoque(),
                            p.getQuantidadeEstoque() > p.getQuantidadeMaxima() ? "Alto" : "Normal"
                    });
                }

                TabelaRelatorio.setModel(modeloTabela);

                DefaultTableCellRenderer rendererStatusMax = new DefaultTableCellRenderer() {
                    private final Icon iconeAlto = new ImageIcon(getClass().getResource("/FRAMEestoque_alto.png"));
                    private final Icon iconeNormal = new ImageIcon(getClass().getResource("/FRAMEestoque_normal.png"));

                    @Override
                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                                   boolean hasFocus, int row, int column) {
                        JLabel label = new JLabel();
                        label.setOpaque(true);

                        String status = value.toString();

                        if (status.equalsIgnoreCase("Alto")) {
                            label.setText("Alto");
                            label.setIcon(iconeAlto);
                            label.setForeground(new Color(202, 138, 4));
                        } else if (status.equalsIgnoreCase("Normal")) {
                            label.setText("Normal");
                            label.setIcon(iconeNormal);
                            label.setForeground(new Color(0, 128, 0));
                        } else {
                            label.setText(status);
                            label.setForeground(Color.BLACK);
                        }

                        label.setHorizontalTextPosition(SwingConstants.RIGHT);
                        label.setIconTextGap(8);

                        if (isSelected) {
                            label.setBackground(table.getSelectionBackground());
                        } else {
                            label.setBackground(Color.WHITE);
                        }

                        return label;
                    }
                };

                TabelaRelatorio.getColumnModel().getColumn(4).setCellRenderer(rendererStatusMax);
                JLValorTotalEstoque.setText("");
                break;
            case 4: /* Relatorio de relacao de produto categoria */
                List<Produto> produtos = produtoDAO.listar();
                List<Categoria> categorias = categoriaDAO.listar();
                Map<String, Integer> contagemPorCategoria = new HashMap<>();

                for (Categoria c : categorias) {
                    contagemPorCategoria.put(c.getNome(), 0);
                }

                for (Produto p : produtos) {
                    Categoria categoria = p.getCategoria();
                    if (categoria != null) {
                        String nomeCategoria = categoria.getNome();
                        contagemPorCategoria.put(nomeCategoria, contagemPorCategoria.get(nomeCategoria) + 1);
                    }
                }

                modeloTabela = new DefaultTableModel();
                modeloTabela.setColumnIdentifiers(new String[]{"Categoria", "Quantidade Produtos Distintos"});

                for (Categoria c : categorias) {
                    String nomeCategoria = c.getNome();
                    int quantidade = contagemPorCategoria.getOrDefault(nomeCategoria, 0);
                    modeloTabela.addRow(new Object[]{nomeCategoria, quantidade});
                }

                TabelaRelatorio.setModel(modeloTabela);
                JLValorTotalEstoque.setText("");
                break;
            default:
                throw new AssertionError();
        }
    }//GEN-LAST:event_JBGerarActionPerformed

    private void JCSeletorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCSeletorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JCSeletorActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmRelatorio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBGerar;
    private javax.swing.JComboBox<String> JCSeletor;
    private javax.swing.JLabel JLValorTotalEstoque;
    private javax.swing.JTable TabelaRelatorio;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
